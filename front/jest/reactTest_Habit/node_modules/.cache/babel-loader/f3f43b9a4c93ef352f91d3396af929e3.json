{"ast":null,"code":"export default class HabitPresenter {\n  constructor(habits, maxHabit) {\n    this.habits = habits;\n    this.maxHabit = maxHabit;\n  }\n\n  getHabits() {\n    return this.habits;\n  }\n\n  increment(habit, update) {\n    this.habits = this.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit,\n          count: habit.count + 1\n        };\n      }\n\n      return item;\n    });\n    update(this.habits);\n  }\n\n  decrement(habit, update) {\n    this.habits = this.habits.map(item => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit,\n          count: count < 0 ? 0 : count\n        };\n      }\n\n      return item;\n    });\n    update(this.habits);\n  }\n\n  delete(habit, update) {\n    this.habits = this.habits.filter(item => item.id !== habit.id);\n    update(this.habits);\n  }\n\n  add(name, update) {\n    if (this.habits.length === this.maxHabit) {\n      throw new Error(`습관의 갯수는 ${this.maxHabit} 이상이 될 수 없습니다`);\n    }\n\n    this.habits = [...this.habits, {\n      id: Date.now(),\n      name,\n      count: 0\n    }];\n    update(this.habits);\n  }\n\n  reset(update) {\n    this.habits = this.habits.map(habit => {\n      if (habit.count !== 0) {\n        return { ...habit,\n          count: 0\n        };\n      }\n\n      return habit;\n    });\n    update(this.habits);\n  }\n\n}","map":{"version":3,"sources":["/Users/kimyoungman/Desktop/study/front/jest/reactTest_Habit/src/app/test/habit_presenter.js"],"names":["HabitPresenter","constructor","habits","maxHabit","getHabits","increment","habit","update","map","item","id","count","decrement","delete","filter","add","name","length","Error","Date","now","reset"],"mappings":"AAAA,eAAe,MAAMA,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC5B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKF,MAAZ;AACD;;AAEDG,EAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvB,SAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYM,GAAZ,CAAiBC,IAAD,IAAU;AACtC,UAAIA,IAAI,CAACC,EAAL,KAAYJ,KAAK,CAACI,EAAtB,EAA0B;AACxB,eAAO,EAAE,GAAGJ,KAAL;AAAYK,UAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,GAAc;AAAjC,SAAP;AACD;;AACD,aAAOF,IAAP;AACD,KALa,CAAd;AAMAF,IAAAA,MAAM,CAAC,KAAKL,MAAN,CAAN;AACD;;AAEDU,EAAAA,SAAS,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACvB,SAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYM,GAAZ,CAAiBC,IAAD,IAAU;AACtC,UAAIA,IAAI,CAACC,EAAL,KAAYJ,KAAK,CAACI,EAAtB,EAA0B;AACxB,cAAMC,KAAK,GAAGL,KAAK,CAACK,KAAN,GAAc,CAA5B;AACA,eAAO,EAAE,GAAGL,KAAL;AAAYK,UAAAA,KAAK,EAAEA,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA;AAAnC,SAAP;AACD;;AACD,aAAOF,IAAP;AACD,KANa,CAAd;AAOAF,IAAAA,MAAM,CAAC,KAAKL,MAAN,CAAN;AACD;;AAEDW,EAAAA,MAAM,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACpB,SAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYY,MAAZ,CAAoBL,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,KAAK,CAACI,EAA/C,CAAd;AACAH,IAAAA,MAAM,CAAC,KAAKL,MAAN,CAAN;AACD;;AAEDa,EAAAA,GAAG,CAACC,IAAD,EAAOT,MAAP,EAAe;AAChB,QAAI,KAAKL,MAAL,CAAYe,MAAZ,KAAuB,KAAKd,QAAhC,EAA0C;AACxC,YAAM,IAAIe,KAAJ,CAAW,WAAU,KAAKf,QAAS,eAAnC,CAAN;AACD;;AACD,SAAKD,MAAL,GAAc,CAAC,GAAG,KAAKA,MAAT,EAAiB;AAAEQ,MAAAA,EAAE,EAAES,IAAI,CAACC,GAAL,EAAN;AAAkBJ,MAAAA,IAAlB;AAAwBL,MAAAA,KAAK,EAAE;AAA/B,KAAjB,CAAd;AACAJ,IAAAA,MAAM,CAAC,KAAKL,MAAN,CAAN;AACD;;AAEDmB,EAAAA,KAAK,CAACd,MAAD,EAAS;AACZ,SAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYM,GAAZ,CAAiBF,KAAD,IAAW;AACvC,UAAIA,KAAK,CAACK,KAAN,KAAgB,CAApB,EAAuB;AACrB,eAAO,EAAE,GAAGL,KAAL;AAAYK,UAAAA,KAAK,EAAE;AAAnB,SAAP;AACD;;AACD,aAAOL,KAAP;AACD,KALa,CAAd;AAMAC,IAAAA,MAAM,CAAC,KAAKL,MAAN,CAAN;AACD;;AApDiC","sourcesContent":["export default class HabitPresenter {\n  constructor(habits, maxHabit) {\n    this.habits = habits;\n    this.maxHabit = maxHabit;\n  }\n\n  getHabits() {\n    return this.habits;\n  }\n\n  increment(habit, update) {\n    this.habits = this.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n    update(this.habits);\n  }\n\n  decrement(habit, update) {\n    this.habits = this.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    update(this.habits);\n  }\n\n  delete(habit, update) {\n    this.habits = this.habits.filter((item) => item.id !== habit.id);\n    update(this.habits);\n  }\n\n  add(name, update) {\n    if (this.habits.length === this.maxHabit) {\n      throw new Error(`습관의 갯수는 ${this.maxHabit} 이상이 될 수 없습니다`);\n    }\n    this.habits = [...this.habits, { id: Date.now(), name, count: 0 }];\n    update(this.habits);\n  }\n\n  reset(update) {\n    this.habits = this.habits.map((habit) => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    update(this.habits);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}